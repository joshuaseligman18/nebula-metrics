<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nebula Metrics</title><link>https://joshuaseligman18.github.io/nebula-metrics/index.html</link><description>Recent content on Nebula Metrics</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://joshuaseligman18.github.io/nebula-metrics/index.xml" rel="self" type="application/rss+xml"/><item><title>What is Nebula Metrics?</title><link>https://joshuaseligman18.github.io/nebula-metrics/about/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joshuaseligman18.github.io/nebula-metrics/about/index.html</guid><description>Problem Statement In recent years, software engineering has relied heavily on remote infrastructure for deploying applications. Whether these machines are managed by a cloud provider (e.g., AWS EC2 instances), hosted in an on-premise datacenter, or located on a hobbyist&amp;rsquo;s server rack, knowing the health status of all running instances is critical to minimize application downtime.
Built-in tools like Task Manager and System Monitor are great when a user has access to the machine&amp;rsquo;s GUI interface.</description></item><item><title>How Nebula Metrics Works</title><link>https://joshuaseligman18.github.io/nebula-metrics/overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joshuaseligman18.github.io/nebula-metrics/overview/index.html</guid><description>Nebula Metrics is broken up into 3 main components: monitor, API, and dashboard. The platform also uses a database for persistent storage of the colected metrics. The following sections describe these parts in detail regarding how they work and some of the key design decisions.
Monitor The monitor runs on a scheduled interval to collect and aggregrate the relevant information for the end-user to fetch. This component is written in the Rust programming language with the tokio asynchronous runtime to be able to run async/await code and makes multithreading easier with multiple tasks needing to run at the same time.</description></item><item><title>Contributing to Nebula Metrics</title><link>https://joshuaseligman18.github.io/nebula-metrics/contributing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joshuaseligman18.github.io/nebula-metrics/contributing/index.html</guid><description>Required Tools Rust Rust (recommended version &amp;gt;= 1.75.0) Cross compiler and complete the below setup instructions (if not developing on Linux) Run rustup target add x86_64-unknown-linux-gnu. Create a .cargo directory in the root of the repository. Create a file called config.toml in the .cargo directory with the below contents. [target.x86_64-unknown-linux-gnu] linker = &amp;#34;x86_64-unknown-linux-gnu-gcc&amp;#34; # Name of the linker binary strip.path = &amp;#34;x86_64-unknown-linux-gnu-strip&amp;#34; # Name of the strip binary cargo-deb Clippy (linter) Rustfmt (formatter) TypeScript Node.</description></item><item><title>Installation Instructions</title><link>https://joshuaseligman18.github.io/nebula-metrics/install/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joshuaseligman18.github.io/nebula-metrics/install/index.html</guid><description>Download Nebula Metrics Our end goal is to have published releases of Nebula Metrics available on the GitHub repository. However, while the application is still in the early stages of development, you must first compile Nebula Metrics locally. See Contributing to Nebula Metrics for how to set up your local environment to build Nebula Metrics from the source code.
Installation Once you have a packaged .deb file for Nebula Metrics, it is now time to install.</description></item><item><title>API Documentation</title><link>https://joshuaseligman18.github.io/nebula-metrics/api/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joshuaseligman18.github.io/nebula-metrics/api/index.html</guid><description/></item></channel></rss>